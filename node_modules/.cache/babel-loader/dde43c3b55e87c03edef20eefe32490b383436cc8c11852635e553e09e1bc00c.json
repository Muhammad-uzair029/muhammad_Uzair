{"ast":null,"code":"// import React, { useState, useEffect, useCallback } from \"react\";\n// import Col from \"react-bootstrap/Col\";\n// import Card from \"react-bootstrap/Card\";\n// import Skeleton from \"react-loading-skeleton\";\n// import axios from \"axios\";\n// const ProjectCard = ({ value }) => {\n//   const {\n//     name,\n//     description,\n//     svn_url,\n//     stargazers_count,\n//     languages_url,\n//     pushed_at,\n//   } = value;\n//   return (\n//     <Col md={6}>\n//       <Card className=\"card shadow-lg p-3 mb-5 bg-white rounded\">\n//         <Card.Body>\n//           <Card.Title as=\"h5\">{name || <Skeleton />} </Card.Title>\n//           <Card.Text>{(!description) ? \"\" : description || <Skeleton count={3} />} </Card.Text>\n//           {svn_url ? <CardButtons svn_url={svn_url} /> : <Skeleton count={2} />}\n//           <hr />\n//           {languages_url ? (\n//             <Language languages_url={languages_url} repo_url={svn_url} />\n//           ) : (\n//             <Skeleton count={3} />\n//           )}\n//           {value ? (\n//             <CardFooter star_count={stargazers_count} repo_url={svn_url} pushed_at={pushed_at} />\n//           ) : (\n//             <Skeleton />\n//           )}\n//         </Card.Body>\n//       </Card>\n//     </Col>\n//   );\n// };\n// const CardButtons = ({ svn_url }) => {\n//   return (\n//     <div className=\"d-grid gap-2 d-md-block\">\n//       <a\n//         href={`${svn_url}/archive/master.zip`}\n//         className=\"btn btn-outline-secondary mx-2\"\n//       >\n//         <i className=\"fab fa-github\" /> Clone Project\n//       </a>\n//       <a href={svn_url} target=\" _blank\" className=\"btn btn-outline-secondary mx-2\">\n//         <i className=\"fab fa-github\" /> Repo\n//       </a>\n//     </div>\n//   );\n// };\n// const Language = ({ languages_url, repo_url }) => {\n//   const [data, setData] = useState([]);\n//   const handleRequest = useCallback(async () => {\n//     try {\n//       const response = await axios.get(languages_url);\n//       return setData(response.data);\n//     } catch (error) {\n//       console.error(error.message);\n//     }\n//   }, [languages_url]);\n//   useEffect(() => {\n//     handleRequest();\n//   }, [handleRequest]);\n//   const array = [];\n//   let total_count = 0;\n//   for (let index in data) {\n//     array.push(index);\n//     total_count += data[index];\n//   }\n//   return (\n//     <div className=\"pb-3\">\n//       Languages:{\" \"}\n//       {array.length\n//         ? array.map((language) => (\n//           <a\n//             key={language}\n//             className=\"card-link\"\n//             href={repo_url + `/search?l=${language}`}\n//             target=\" _blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             <span className=\"badge bg-light text-dark\">\n//               {language}:{\" \"}\n//               {Math.trunc((data[language] / total_count) * 1000) / 10} %\n//             </span>\n//           </a>\n//         ))\n//         : \"code yet to be deployed.\"}\n//     </div>\n//   );\n// };\n// const CardFooter = ({ star_count, repo_url, pushed_at }) => {\n//   const [updated_at, setUpdated_at] = useState(\"0 mints\");\n//   const handleUpdatetime = useCallback(() => {\n//     const date = new Date(pushed_at);\n//     const nowdate = new Date();\n//     const diff = nowdate.getTime() - date.getTime();\n//     const hours = Math.trunc(diff / 1000 / 60 / 60);\n//     if (hours < 24) {\n//       if (hours < 1) return setUpdated_at(\"just now\");\n//       let measurement = hours === 1 ? \"hour\" : \"hours\";\n//       return setUpdated_at(`${hours.toString()} ${measurement} ago`);\n//     } else {\n//       const options = { day: \"numeric\", month: \"long\", year: \"numeric\" };\n//       const time = new Intl.DateTimeFormat(\"en-US\", options).format(date);\n//       return setUpdated_at(`on ${time}`);\n//     }\n//   }, [pushed_at]);\n//   useEffect(() => {\n//     handleUpdatetime();\n//   }, [handleUpdatetime]);\n//   return (\n//     <p className=\"card-text\">\n//       <a\n//         href={repo_url + \"/stargazers\"}\n//         target=\" _blank\"\n//         className=\"text-dark text-decoration-none\"\n//       >\n//         <span className=\"text-dark card-link mr-4\">\n//           <i className=\"fab fa-github\" /> Stars{\" \"}\n//           <span className=\"badge badge-dark\">{star_count}</span>\n//         </span>\n//       </a>\n//       <small className=\"text-muted\">Updated {updated_at}</small>\n//     </p>\n//   );\n// };\nimport React from'react';import{Col,Card,Button}from'react-bootstrap';import{FiLink}from'react-icons/fi';// Assuming you're using react-icons for consistency\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ProjectCard=_ref=>{let{project}=_ref;return/*#__PURE__*/_jsx(Col,{lg:\"6\",className:\"mb-4\",children:/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsxs(Card.Title,{className:\"text-center mb-3\",children:[project.name,\" - \",project.company,/*#__PURE__*/_jsx(\"a\",{href:project.link,target:\"_blank\",rel:\"noopener noreferrer\",style:{marginLeft:'10px',fontSize:'20px'},children:/*#__PURE__*/_jsx(FiLink,{})})]}),/*#__PURE__*/_jsx(Card.Text,{children:project.description})]}),/*#__PURE__*/_jsx(Card.Footer,{children:/*#__PURE__*/_jsxs(\"small\",{className:\"text-muted\",children:[\"Technologies: \",project.technologies]})})]})});};export default ProjectCard;","map":{"version":3,"names":["React","Col","Card","Button","FiLink","jsx","_jsx","jsxs","_jsxs","ProjectCard","_ref","project","lg","className","children","Body","Title","name","company","href","link","target","rel","style","marginLeft","fontSize","Text","description","Footer","technologies"],"sources":["/Users/softaims/Desktop/muhammad_Uzair/muhammad_Uzair/src/components/home/ProjectCard.jsx"],"sourcesContent":["// import React, { useState, useEffect, useCallback } from \"react\";\n// import Col from \"react-bootstrap/Col\";\n// import Card from \"react-bootstrap/Card\";\n// import Skeleton from \"react-loading-skeleton\";\n// import axios from \"axios\";\n\n// const ProjectCard = ({ value }) => {\n//   const {\n//     name,\n//     description,\n//     svn_url,\n//     stargazers_count,\n//     languages_url,\n//     pushed_at,\n//   } = value;\n//   return (\n//     <Col md={6}>\n//       <Card className=\"card shadow-lg p-3 mb-5 bg-white rounded\">\n//         <Card.Body>\n//           <Card.Title as=\"h5\">{name || <Skeleton />} </Card.Title>\n//           <Card.Text>{(!description) ? \"\" : description || <Skeleton count={3} />} </Card.Text>\n//           {svn_url ? <CardButtons svn_url={svn_url} /> : <Skeleton count={2} />}\n//           <hr />\n//           {languages_url ? (\n//             <Language languages_url={languages_url} repo_url={svn_url} />\n//           ) : (\n//             <Skeleton count={3} />\n//           )}\n//           {value ? (\n//             <CardFooter star_count={stargazers_count} repo_url={svn_url} pushed_at={pushed_at} />\n//           ) : (\n//             <Skeleton />\n//           )}\n//         </Card.Body>\n//       </Card>\n//     </Col>\n//   );\n// };\n\n// const CardButtons = ({ svn_url }) => {\n//   return (\n//     <div className=\"d-grid gap-2 d-md-block\">\n//       <a\n//         href={`${svn_url}/archive/master.zip`}\n//         className=\"btn btn-outline-secondary mx-2\"\n//       >\n//         <i className=\"fab fa-github\" /> Clone Project\n//       </a>\n//       <a href={svn_url} target=\" _blank\" className=\"btn btn-outline-secondary mx-2\">\n//         <i className=\"fab fa-github\" /> Repo\n//       </a>\n//     </div>\n//   );\n// };\n\n// const Language = ({ languages_url, repo_url }) => {\n//   const [data, setData] = useState([]);\n\n//   const handleRequest = useCallback(async () => {\n//     try {\n//       const response = await axios.get(languages_url);\n//       return setData(response.data);\n//     } catch (error) {\n//       console.error(error.message);\n//     }\n//   }, [languages_url]);\n\n//   useEffect(() => {\n//     handleRequest();\n//   }, [handleRequest]);\n\n//   const array = [];\n//   let total_count = 0;\n//   for (let index in data) {\n//     array.push(index);\n//     total_count += data[index];\n//   }\n\n//   return (\n//     <div className=\"pb-3\">\n//       Languages:{\" \"}\n//       {array.length\n//         ? array.map((language) => (\n//           <a\n//             key={language}\n//             className=\"card-link\"\n//             href={repo_url + `/search?l=${language}`}\n//             target=\" _blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             <span className=\"badge bg-light text-dark\">\n//               {language}:{\" \"}\n//               {Math.trunc((data[language] / total_count) * 1000) / 10} %\n//             </span>\n//           </a>\n\n//         ))\n//         : \"code yet to be deployed.\"}\n//     </div>\n//   );\n// };\n\n// const CardFooter = ({ star_count, repo_url, pushed_at }) => {\n//   const [updated_at, setUpdated_at] = useState(\"0 mints\");\n\n//   const handleUpdatetime = useCallback(() => {\n//     const date = new Date(pushed_at);\n//     const nowdate = new Date();\n//     const diff = nowdate.getTime() - date.getTime();\n//     const hours = Math.trunc(diff / 1000 / 60 / 60);\n\n//     if (hours < 24) {\n//       if (hours < 1) return setUpdated_at(\"just now\");\n//       let measurement = hours === 1 ? \"hour\" : \"hours\";\n//       return setUpdated_at(`${hours.toString()} ${measurement} ago`);\n//     } else {\n//       const options = { day: \"numeric\", month: \"long\", year: \"numeric\" };\n//       const time = new Intl.DateTimeFormat(\"en-US\", options).format(date);\n//       return setUpdated_at(`on ${time}`);\n//     }\n//   }, [pushed_at]);\n\n//   useEffect(() => {\n//     handleUpdatetime();\n//   }, [handleUpdatetime]);\n\n//   return (\n//     <p className=\"card-text\">\n//       <a\n//         href={repo_url + \"/stargazers\"}\n//         target=\" _blank\"\n//         className=\"text-dark text-decoration-none\"\n//       >\n//         <span className=\"text-dark card-link mr-4\">\n//           <i className=\"fab fa-github\" /> Stars{\" \"}\n//           <span className=\"badge badge-dark\">{star_count}</span>\n//         </span>\n//       </a>\n//       <small className=\"text-muted\">Updated {updated_at}</small>\n//     </p>\n//   );\n// };\nimport React from 'react';\nimport { Col, Card, Button } from 'react-bootstrap';\nimport { FiLink } from 'react-icons/fi'; // Assuming you're using react-icons for consistency\n\nconst ProjectCard = ({ project }) => {\n  return (\n    <Col lg=\"6\" className=\"mb-4\">\n      <Card>\n        <Card.Body>\n          <Card.Title className=\"text-center mb-3\">\n            {project.name} - {project.company}\n            <a href={project.link} target=\"_blank\" rel=\"noopener noreferrer\" style={{ marginLeft: '10px', fontSize: '20px' }}>\n              <FiLink />\n            </a>\n          </Card.Title>\n          <Card.Text>{project.description}</Card.Text>\n          {/* <div className=\"text-muted\">Technologies: {project.technologies}</div> */}\n        </Card.Body>\n        <Card.Footer>\n          <small className=\"text-muted\">Technologies: {project.technologies}</small>\n        </Card.Footer>\n      </Card>\n    </Col>\n  );\n};\n\nexport default ProjectCard;\n\n"],"mappingszB,OAASC,GAAG,CAAEC,IAAI,CAAEC,MAAM,KAAQ,iBAAiB,CACnD,OAASC,MAAM,KAAQ,gBAAgB,CAAE;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEzC,KAAM,CAAAC,WAAW,CAAGC,IAAA,EAAiB,IAAhB,CAAEC,OAAQ,CAAC,CAAAD,IAAA,CAC9B,mBACEJ,IAAA,CAACL,GAAG,EAACW,EAAE,CAAC,GAAG,CAACC,SAAS,CAAC,MAAM,CAAAC,QAAA,cAC1BN,KAAA,CAACN,IAAI,EAAAY,QAAA,eACHN,KAAA,CAACN,IAAI,CAACa,IAAI,EAAAD,QAAA,eACRN,KAAA,CAACN,IAAI,CAACc,KAAK,EAACH,SAAS,CAAC,kBAAkB,CAAAC,QAAA,EACrCH,OAAO,CAACM,IAAI,CAAC,KAAG,CAACN,OAAO,CAACO,OAAO,cACjCZ,IAAA,MAAGa,IAAI,CAAER,OAAO,CAACS,IAAK,CAACC,MAAM,CAAC,QAAQ,CAACC,GAAG,CAAC,qBAAqB,CAACC,KAAK,CAAE,CAAEC,UAAU,CAAE,MAAM,CAAEC,QAAQ,CAAE,MAAO,CAAE,CAAAX,QAAA,cAC/GR,IAAA,CAACF,MAAM,GAAE,CAAC,CACT,CAAC,EACM,CAAC,cACbE,IAAA,CAACJ,IAAI,CAACwB,IAAI,EAAAZ,QAAA,CAAEH,OAAO,CAACgB,WAAW,CAAY,CAAC,EAEnC,CAAC,cACZrB,IAAA,CAACJ,IAAI,CAAC0B,MAAM,EAAAd,QAAA,cACVN,KAAA,UAAOK,SAAS,CAAC,YAAY,CAAAC,QAAA,EAAC,gBAAc,CAACH,OAAO,CAACkB,YAAY,EAAQ,CAAC,CAC/D,CAAC,EACV,CAAC,CACJ,CAAC,CAEV,CAAC,CAED,cAAe,CAAApB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}